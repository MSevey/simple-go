name: goreleaser

on:
  push:
    branches:
      - main
    # Trigger on version tags
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        # Friendly description to be shown in the UI instead of 'name'
        description: "Semver type of new version (major / minor / patch)"
        # Input has to be provided for the workflow to run
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) }}
    permissions: "write-all"
    steps:
      - uses: actions/checkout@v3
      # If this was a workflow dispatch event, we need to generate and push a
      # tag for goreleaser to grab
      - name: Bump version and push tag
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ inputs.github-token }}
          default_bump: ${{ inputs.version-bump }}
      # Use goreleaser to generate the release with binaries
      #
      # git fetch to ensure we pull the latest tag
      - run: git fetch --force --tags
      - uses: actions/setup-go@v4
        with:
          go-version: 1.20
      # Import the GPG key from github secrets to sign the binaries
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      # Generate the binaries, release, and sign the checksum
      - uses: goreleaser/goreleaser-action@v4
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro':
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
